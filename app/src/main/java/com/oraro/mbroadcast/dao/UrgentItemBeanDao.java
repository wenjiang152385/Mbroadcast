package com.oraro.mbroadcast.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.mbroadcast.model.UrgentItemBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "URGENT_ITEM_BEAN".
*/
public class UrgentItemBeanDao extends AbstractDao<UrgentItemBean, Long> {

    public static final String TABLENAME = "URGENT_ITEM_BEAN";

    /**
     * Properties of entity UrgentItemBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property InterCutDataId = new Property(1, Long.class, "interCutDataId", false, "INTER_CUT_DATA_ID");
        public final static Property IsSelected = new Property(2, Boolean.class, "isSelected", false, "IS_SELECTED");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Params = new Property(4, String.class, "params", false, "PARAMS");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
    }


    public UrgentItemBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UrgentItemBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"URGENT_ITEM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"INTER_CUT_DATA_ID\" INTEGER," + // 1: interCutDataId
                "\"IS_SELECTED\" INTEGER," + // 2: isSelected
                "\"TYPE\" TEXT," + // 3: type
                "\"PARAMS\" TEXT," + // 4: params
                "\"CONTENT\" TEXT);"); // 5: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"URGENT_ITEM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UrgentItemBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long interCutDataId = entity.getInterCutDataId();
        if (interCutDataId != null) {
            stmt.bindLong(2, interCutDataId);
        }
 
        Boolean isSelected = entity.getIsSelected();
        if (isSelected != null) {
            stmt.bindLong(3, isSelected ? 1L: 0L);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String params = entity.getParams();
        if (params != null) {
            stmt.bindString(5, params);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UrgentItemBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long interCutDataId = entity.getInterCutDataId();
        if (interCutDataId != null) {
            stmt.bindLong(2, interCutDataId);
        }
 
        Boolean isSelected = entity.getIsSelected();
        if (isSelected != null) {
            stmt.bindLong(3, isSelected ? 1L: 0L);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String params = entity.getParams();
        if (params != null) {
            stmt.bindString(5, params);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UrgentItemBean readEntity(Cursor cursor, int offset) {
        UrgentItemBean entity = new UrgentItemBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // interCutDataId
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isSelected
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // params
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UrgentItemBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInterCutDataId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIsSelected(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setParams(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UrgentItemBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UrgentItemBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UrgentItemBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
